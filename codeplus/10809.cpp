/* 
 * # 10809 : 알파벳 찾기
 * - 문제
 * 알파벳 소문자로만 이루어진 단어 S가 주어진다. 
 * 각각의 알파벳에 대해서, 단어에 포함되어 있는 경우에는 처음 등장하는 위치를, 
 * 포함되어 있지 않은 경우에는 -1을 출력하는 프로그램을 작성하시오.
 * 
 * - 입력
 * 첫째 줄에 단어 S가 주어진다. 단어의 길이는 100을 넘지 않으며, 알파벳 소문자로만 이루어져 있다.
 * 
 * - 출력
 * 각각의 알파벳에 대해서, a가 처음 등장하는 위치, b가 처음 등장하는 위치,
 *  ... z가 처음 등장하는 위치를 공백으로 구분해서 출력한다.
 * 만약, 어떤 알파벳이 단어에 포함되어 있지 않다면 -1을 출력한다. 
 * 단어의 첫 번째 글자는 0번째 위치이고, 두 번째 글자는 1번째 위치이다.
 *  
 * *********************************************************************************
 * 
 * # writeup
 * - 분석
 * 
 * 
 * - 생각
 * 
 * 
 * SOLVE 1> 
 * 1. find()는 못찾을 경우 end에 대한 iterator를 반환한다는 것을 명시!!
 * 2. iterator를 통해 idx를 계산하고 싶을 때는 "it - x.begin()"
 * 
 * More> iterator에 대한 연산은 어떤 규칙에 의해 이루어질까??
*/

// Solve 1
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

int main()
{
    string s;
    cin >> s;
    for(char i='a'; i<='z'; i++){
        auto it = find(s.begin(), s.end(), i);
        if(it == s.end()){
            printf("-1 ");
        }
        else{
            printf("%d ", it-s.begin());
        }
    }
}