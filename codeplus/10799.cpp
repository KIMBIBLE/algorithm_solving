/* 
 * # 10799 : 쇠막대기
 * - 문제
 * 여러 개의 쇠막대기를 레이저로 절단하려고 한다. 
 * 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 
 * 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자른다. 
 * 쇠막대기와 레이저의 배치는 다음 조건을 만족한다.
 * 
 * 쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있다. 
 * - 쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되, 
 * 끝점은 겹치지 않도록 놓는다. 각 쇠막대기를 자르는 레이저는 
 * 적어도 하나 존재한다. 레이저는 어떤 쇠막대기의 양 끝점과도 
 * 겹치지 않는다.  아래 그림은 위 조건을 만족하는 예를 보여준다. 
 * 수평으로 그려진 굵은 실선은 쇠막대기이고, 점은 레이저의 위치, 
 * 수직으로 그려진 점선 화살표는 레이저의 발사 방향이다.
 * 
 * 그림은 문제에
 * https://www.acmicpc.net/problem/10799 
 * 
 * 이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 
 * 순서대로 표현할 수 있다. 레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 
 * ‘( ) ’ 으로 표현된다. 또한, 모든 ‘( ) ’는 반드시 레이저를 표현한다.
 * 쇠막대기의 왼쪽 끝은 여는 괄호 ‘ ( ’ 로, 오른쪽 끝은 닫힌 괄호 
 * ‘) ’ 로 표현된다. 위 예의 괄호 표현은 그림 위에 주어져 있다.
 * 
 * 쇠막대기는 레이저에 의해 몇 개의 조각으로 잘려지는데, 
 * 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 
 * 조각으로 잘려지고, 이와 같은 방식으로 주어진 쇠막대기들은 
 * 총 17개의 조각으로 잘려진다. 
 * 
 * 쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 주어졌을 때, 
 * 잘려진 쇠막대기 조각의 총 개수를 구하는 프로그램을 작성하시오.
 * 
 * - 입력
 * 한 줄에 쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 공백없이 
 * 주어진다. 괄호 문자의 개수는 최대 100,000이다. 
 * 
 * - 출력
 * 잘려진 조각의 총 개수를 나타내는 정수를 한 줄에 출력한다.
 *  
 * *********************************************************************************
 * 
 * # writeup
 * - 분석
 * ()(((()())(())()))(())
 * 문제를 간단히 생각해보면 문자열을 차례로 스택에 푸시하는 과정에서
 * 레이저와 파이프의 끝에 해당하는 ')'를 만나면 이전까지 스택에 
 * 푸시 된 '('의 갯수를 더해가는과정을 반복하면 될 듯하다.
 * 스택을 한번만 사용하면 되기 때문에 시간 복잡도 또한
 * O(N) 정도로 나오고, 괄호 막대기의 갯수(N) 또한 최대 100,000이기
 * 때문에 1초 시간 제약조건을 만족하기에 충분할 듯 예상.
 * 
 * - 생각
 * 생각해보니 문자열도 따로 안쓰고 바로바로 입력 받아주면 더 빠를듯
 * 
 * SOLVE 1> 
 * 위의 풀이대로 풀어봤으나 적합한 결과가 안나옴.
 * 왜그런지 문제를 찾아보니 레이저와 파이프의 끝을 구분할 수 있는
 * 그런 기준을 포함하지 못했음. => 이전 값이라는 prev값을 두어
 * 해결했으나 코드 자체가 직관적이지 않은 단점이 있음.
 * 최적화 코드를 고민해보자
 * 
*/

// Solve 1
#include <iostream>
#include <stack>
using namespace std;

int main()
{    
    stack<char> s;
    char ch, prev = ')';
    int sum = 0;
    while(cin >> ch){
        if(ch == ')'){
            if(prev == '('){
                s.pop();
                sum += s.size();
            }
            else{
                s.pop();
                sum++;
            }
        }
        else{
            s.push('(');
        }
        prev = ch;
    }
    cout << sum;
}
