/* 
 * # 10816 : 숫자 카드 2
 * - 문제
 * 숫자 카드는 정수 하나가 적혀져 있는 카드이다. 
 * 상근이는 숫자 카드 N개를 가지고 있다. 숫자 M개가 주어졌을 때, 
 * 이 숫자가 적혀있는 숫자 카드를 상근이가 몇 개 가지고 있는지 
 * 구하는 프로그램을 작성하시오.
 * 
 * - 입력
 * 첫째 줄에 상근이가 가지고 있는 숫자 카드의 개수 N 
 * (1 ≤ N ≤ 500,000)이가 주어진다. 둘째 줄에는 숫자 카드에 
 * 적혀있는 숫자가 주어진다. 숫자 카드에 적혀있는 숫자는 
 * -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다.
 * 셋째 줄에는 M (1 ≤ M ≤ 500,000)이 주어진다. 
 * 넷째 줄에는 상근이가 몇 개 가지고 있는 숫자 카드인지 구해야 할
 * M개의 숫자가 주어지며, 이 숫자는 공백으로 구분되어져 있다. 
 * 이숫자도 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다.
 * 
 * - 출력
 * 첫째 줄에 입력으로 주어진 M개의 숫자에 대해서, 각 숫자가 
 * 적힌 숫자 카드를 상근이가 몇 개 가지고 있는지를 공백으로 
 * 구분해 출력한다.
 *  
 * *********************************************************************************
 * 
 * # writeup
 * - 분석
 * multiset에 데이터를 저장하고, count를 출력하는 방식에서
 * timeout이 발생한다. multiset을 사용한는 것 보다
 * 효율적인 방식을 고민해야 할 듯.
 * O(NlogN)보다 빠른 방법을 찾아야 함.
 * 
 * 
 * - 생각
 * 
 * 
 * SOLVE 2> 
 * 풀다가 못풀어서 백준 풀이 봤는데, 생각이 참신하다!!
 * STL을 이런식으로 활용할 수 도 있구나!
 * 중복된 수를 셀 때 이런식으로 소팅해놓고
 * 'upper_bound() - lower_bound()'를 통해 사이의 요소만 구해버리면
 * 속도면에서 훨씬 빠르다!
 * 
 * 참고> stl 컨테이너 간 '-' 연산 시에는 요소의 갯수가 나옴!(포인터랑 비슷)
 * 
*/
#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

int main() {
    int n;
    scanf("%d",&n);
    vector<int> a(n);
    for (int i=0; i<n; i++) {
        scanf("%d",&a[i]);
    }
 
    sort(a.begin(), a.end());
    int m;
    scanf("%d",&m);
    for (int i=0; i<m; i++) {
        int number;
        scanf("%d",&number);
        auto l = lower_bound(a.begin(), a.end(), number);
        auto r = upper_bound(a.begin(), a.end(), number);
        printf("%d ",r-l);
    }
    printf("\n");
    return 0;
}